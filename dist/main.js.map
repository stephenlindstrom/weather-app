{"version":3,"file":"main.js","mappings":"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","sources":["webpack://weather-app/./src/style.css","webpack://weather-app/./node_modules/css-loader/dist/runtime/api.js","webpack://weather-app/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://weather-app/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://weather-app/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://weather-app/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://weather-app/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://weather-app/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://weather-app/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/compat get default export","webpack://weather-app/webpack/runtime/define property getters","webpack://weather-app/webpack/runtime/global","webpack://weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://weather-app/webpack/runtime/publicPath","webpack://weather-app/webpack/runtime/nonce","webpack://weather-app/./src/style.css?7163","webpack://weather-app/./node_modules/date-fns/locale/en-US/_lib/formatDistance.js","webpack://weather-app/./node_modules/date-fns/locale/_lib/buildFormatLongFn.js","webpack://weather-app/./node_modules/date-fns/locale/en-US/_lib/formatLong.js","webpack://weather-app/./node_modules/date-fns/locale/en-US/_lib/formatRelative.js","webpack://weather-app/./node_modules/date-fns/locale/_lib/buildLocalizeFn.js","webpack://weather-app/./node_modules/date-fns/locale/en-US/_lib/localize.js","webpack://weather-app/./node_modules/date-fns/locale/_lib/buildMatchFn.js","webpack://weather-app/./node_modules/date-fns/locale/en-US/_lib/match.js","webpack://weather-app/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","webpack://weather-app/./node_modules/date-fns/locale/en-US.js","webpack://weather-app/./node_modules/date-fns/_lib/defaultOptions.js","webpack://weather-app/./node_modules/date-fns/constants.js","webpack://weather-app/./node_modules/date-fns/constructFrom.js","webpack://weather-app/./node_modules/date-fns/toDate.js","webpack://weather-app/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","webpack://weather-app/./node_modules/date-fns/startOfDay.js","webpack://weather-app/./node_modules/date-fns/getDayOfYear.js","webpack://weather-app/./node_modules/date-fns/differenceInCalendarDays.js","webpack://weather-app/./node_modules/date-fns/_lib/normalizeDates.js","webpack://weather-app/./node_modules/date-fns/startOfYear.js","webpack://weather-app/./node_modules/date-fns/startOfWeek.js","webpack://weather-app/./node_modules/date-fns/startOfISOWeek.js","webpack://weather-app/./node_modules/date-fns/getISOWeekYear.js","webpack://weather-app/./node_modules/date-fns/getISOWeek.js","webpack://weather-app/./node_modules/date-fns/startOfISOWeekYear.js","webpack://weather-app/./node_modules/date-fns/getWeekYear.js","webpack://weather-app/./node_modules/date-fns/getWeek.js","webpack://weather-app/./node_modules/date-fns/startOfWeekYear.js","webpack://weather-app/./node_modules/date-fns/_lib/addLeadingZeros.js","webpack://weather-app/./node_modules/date-fns/_lib/format/lightFormatters.js","webpack://weather-app/./node_modules/date-fns/_lib/format/formatters.js","webpack://weather-app/./node_modules/date-fns/_lib/format/longFormatters.js","webpack://weather-app/./node_modules/date-fns/_lib/protectedTokens.js","webpack://weather-app/./node_modules/date-fns/isValid.js","webpack://weather-app/./node_modules/date-fns/isDate.js","webpack://weather-app/./node_modules/date-fns/format.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/_lib/tzIntlTimeZoneName/index.js","webpack://weather-app/./node_modules/date-fns/getDefaultOptions.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/_lib/tzTokenizeDate/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/_lib/newDateUTC/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/_lib/tzParseTimezone/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/format/formatters/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/_lib/tzPattern/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/toDate/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/format/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/formatInTimeZone/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/toZonedTime/index.js","webpack://weather-app/./node_modules/date-fns-tz/dist/esm/fromZonedTime/index.js","webpack://weather-app/./src/dataHandling.js","webpack://weather-app/./src/display.js","webpack://weather-app/./src/homepage.js","webpack://weather-app/./src/weather-app.js"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.weather-display {\n  width: 500px;\n  padding: 50px;\n  width: 500px;\n  border: 2px solid black;\n}\n\n.flex-container-column {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  color: white;\n}\n\n.flex-item {\n  margin-bottom: 10px;\n  font-family: Verdana, Tahoma, sans-serif\n}\n\n#current-temp {\n  font-size: 3rem;\n}\n\n#time {\n  font-size: 1.5rem;\n}\n\n#forecast-container {\n  display: flex;\n  width: 100%;\n  justify-content: space-around;\n}\n\n.forecast {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n#search-location {\n  background-color: rgb(230, 230, 233);\n  border-radius: 4px;\n  padding: 3px 10px;\n}\n\n.search-button {\n  background-color: rgb(230, 230, 233);\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.grid-container {\n  display: grid;\n  grid-template-columns: 400px 400px;\n  grid-template-rows: 400px 400px;\n  gap: 20px;\n}\n\n.grid-container > div {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  height: 400px;\n  width: 400px;\n  border: 2px solid black;\n}\n`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/style.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,YAAY;EACZ,aAAa;EACb,YAAY;EACZ,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,mBAAmB;EACnB;AACF;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,WAAW;EACX,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,oCAAoC;EACpC,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,kCAAkC;EAClC,+BAA+B;EAC/B,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;EACZ,aAAa;EACb,YAAY;EACZ,uBAAuB;AACzB\",\"sourcesContent\":[\".weather-display {\\n  width: 500px;\\n  padding: 50px;\\n  width: 500px;\\n  border: 2px solid black;\\n}\\n\\n.flex-container-column {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  color: white;\\n}\\n\\n.flex-item {\\n  margin-bottom: 10px;\\n  font-family: Verdana, Tahoma, sans-serif\\n}\\n\\n#current-temp {\\n  font-size: 3rem;\\n}\\n\\n#time {\\n  font-size: 1.5rem;\\n}\\n\\n#forecast-container {\\n  display: flex;\\n  width: 100%;\\n  justify-content: space-around;\\n}\\n\\n.forecast {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n}\\n\\n#search-location {\\n  background-color: rgb(230, 230, 233);\\n  border-radius: 4px;\\n  padding: 3px 10px;\\n}\\n\\n.search-button {\\n  background-color: rgb(230, 230, 233);\\n  border-radius: 4px;\\n  cursor: pointer;\\n}\\n\\n.grid-container {\\n  display: grid;\\n  grid-template-columns: 400px 400px;\\n  grid-template-rows: 400px 400px;\\n  gap: 20px;\\n}\\n\\n.grid-container > div {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  color: white;\\n  height: 400px;\\n  width: 400px;\\n  border: 2px solid black;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += \"}\";\n      }\n      if (item[2]) {\n        content += \"}\";\n      }\n      if (item[4]) {\n        content += \"}\";\n      }\n      return content;\n    }).join(\"\");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    return [content].concat([sourceMapping]).join(\"\\n\");\n  }\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n  var needLayer = typeof obj.layer !== \"undefined\";\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += \"}\";\n  }\n  if (obj.media) {\n    css += \"}\";\n  }\n  if (obj.supports) {\n    css += \"}\";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === \"undefined\") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.nc = undefined;","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./style.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\noptions.insert = insertFn.bind(null, \"head\");\noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./style.css\";\n       export default content && content.locals ? content.locals : undefined;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { getDefaultOptions } from 'date-fns';\n/**\n * Returns the formatted time zone name of the provided `timeZone` or the current\n * system time zone if omitted, accounting for DST according to the UTC value of\n * the date.\n */\nexport function tzIntlTimeZoneName(length, date, options) {\n    const defaultOptions = getDefaultOptions();\n    const dtf = getDTF(length, options.timeZone, options.locale ?? defaultOptions.locale);\n    return 'formatToParts' in dtf ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date);\n}\nfunction partsTimeZone(dtf, date) {\n    const formatted = dtf.formatToParts(date);\n    for (let i = formatted.length - 1; i >= 0; --i) {\n        if (formatted[i].type === 'timeZoneName') {\n            return formatted[i].value;\n        }\n    }\n    return undefined;\n}\nfunction hackyTimeZone(dtf, date) {\n    const formatted = dtf.format(date).replace(/\\u200E/g, '');\n    const tzNameMatch = / [\\w-+ ]+$/.exec(formatted);\n    return tzNameMatch ? tzNameMatch[0].substr(1) : '';\n}\n// If a locale has been provided `en-US` is used as a fallback in case it is an\n// invalid locale, otherwise the locale is left undefined to use the system locale.\nfunction getDTF(length, timeZone, locale) {\n    return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {\n        timeZone: timeZone,\n        timeZoneName: length,\n    });\n}\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.js\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport function tzTokenizeDate(date, timeZone) {\n    const dtf = getDateTimeFormat(timeZone);\n    return 'formatToParts' in dtf ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\nconst typeToPos = {\n    year: 0,\n    month: 1,\n    day: 2,\n    hour: 3,\n    minute: 4,\n    second: 5,\n};\nfunction partsOffset(dtf, date) {\n    try {\n        const formatted = dtf.formatToParts(date);\n        const filled = [];\n        for (let i = 0; i < formatted.length; i++) {\n            const pos = typeToPos[formatted[i].type];\n            if (pos !== undefined) {\n                filled[pos] = parseInt(formatted[i].value, 10);\n            }\n        }\n        return filled;\n    }\n    catch (error) {\n        if (error instanceof RangeError) {\n            return [NaN];\n        }\n        throw error;\n    }\n}\nfunction hackyOffset(dtf, date) {\n    const formatted = dtf.format(date);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\n    // const [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n    // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n    return [\n        parseInt(parsed[3], 10),\n        parseInt(parsed[1], 10),\n        parseInt(parsed[2], 10),\n        parseInt(parsed[4], 10),\n        parseInt(parsed[5], 10),\n        parseInt(parsed[6], 10),\n    ];\n}\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nconst dtfCache = {};\n// New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\nconst testDateFormatted = new Intl.DateTimeFormat('en-US', {\n    hourCycle: 'h23',\n    timeZone: 'America/New_York',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n}).format(new Date('2014-06-25T04:00:00.123Z'));\nconst hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' ||\n    testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\nfunction getDateTimeFormat(timeZone) {\n    if (!dtfCache[timeZone]) {\n        dtfCache[timeZone] = hourCycleSupported\n            ? new Intl.DateTimeFormat('en-US', {\n                hourCycle: 'h23',\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            })\n            : new Intl.DateTimeFormat('en-US', {\n                hour12: false,\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n    }\n    return dtfCache[timeZone];\n}\n","/**\n * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work\n * otherwise due to the nature of the\n * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.\n *\n * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.\n */\nexport function newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {\n    const utcDate = new Date(0);\n    utcDate.setUTCFullYear(fullYear, month, day);\n    utcDate.setUTCHours(hour, minute, second, millisecond);\n    return utcDate;\n}\n","import { tzTokenizeDate } from '../tzTokenizeDate/index.js';\nimport { newDateUTC } from '../newDateUTC/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst patterns = {\n    timezone: /([Z+-].*)$/,\n    timezoneZ: /^(Z)$/,\n    timezoneHH: /^([+-]\\d{2})$/,\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n};\n// Parse constious time zone offset formats to an offset in milliseconds\nexport function tzParseTimezone(timezoneString, date, isUtcDate) {\n    // Empty string\n    if (!timezoneString) {\n        return 0;\n    }\n    // Z\n    let token = patterns.timezoneZ.exec(timezoneString);\n    if (token) {\n        return 0;\n    }\n    let hours;\n    let absoluteOffset;\n    // ±hh\n    token = patterns.timezoneHH.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        if (!validateTimezone(hours)) {\n            return NaN;\n        }\n        return -(hours * MILLISECONDS_IN_HOUR);\n    }\n    // ±hh:mm or ±hhmm\n    token = patterns.timezoneHHMM.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[2], 10);\n        const minutes = parseInt(token[3], 10);\n        if (!validateTimezone(hours, minutes)) {\n            return NaN;\n        }\n        absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n        return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n    }\n    // IANA time zone\n    if (isValidTimezoneIANAString(timezoneString)) {\n        date = new Date(date || Date.now());\n        const utcDate = isUtcDate ? date : toUtcDate(date);\n        const offset = calcOffset(utcDate, timezoneString);\n        const fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n        return -fixedOffset;\n    }\n    return NaN;\n}\nfunction toUtcDate(date) {\n    return newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\nfunction calcOffset(date, timezoneString) {\n    const tokens = tzTokenizeDate(date, timezoneString);\n    // ms dropped because it's not provided by tzTokenizeDate\n    const asUTC = newDateUTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n    let asTS = date.getTime();\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return asUTC - asTS;\n}\nfunction fixOffset(date, offset, timezoneString) {\n    const localTS = date.getTime();\n    // Our UTC time is just a guess because our offset is just a guess\n    let utcGuess = localTS - offset;\n    // Test whether the zone matches the offset for this ts\n    const o2 = calcOffset(new Date(utcGuess), timezoneString);\n    // If so, offset didn't change, and we're done\n    if (offset === o2) {\n        return offset;\n    }\n    // If not, change the ts by the difference in the offset\n    utcGuess -= o2 - offset;\n    // If that gives us the local time we want, we're done\n    const o3 = calcOffset(new Date(utcGuess), timezoneString);\n    if (o2 === o3) {\n        return o2;\n    }\n    // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n    return Math.max(o2, o3);\n}\nfunction validateTimezone(hours, minutes) {\n    return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59));\n}\nconst validIANATimezoneCache = {};\nfunction isValidTimezoneIANAString(timeZoneString) {\n    if (validIANATimezoneCache[timeZoneString])\n        return true;\n    try {\n        new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString });\n        validIANATimezoneCache[timeZoneString] = true;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n","import { tzIntlTimeZoneName } from '../../_lib/tzIntlTimeZoneName/index.js';\nimport { tzParseTimezone } from '../../_lib/tzParseTimezone/index.js';\nconst MILLISECONDS_IN_MINUTE = 60 * 1000;\nexport const formatters = {\n    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n    X: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        if (timezoneOffset === 0) {\n            return 'Z';\n        }\n        switch (token) {\n            // Hours and optional minutes\n            case 'X':\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XX`\n            case 'XXXX':\n            case 'XX': // Hours and minutes without `:` delimeter\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `XXX`\n            case 'XXXXX':\n            case 'XXX': // Hours and minutes with `:` delimeter\n            default:\n                return formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n    x: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        switch (token) {\n            // Hours and optional minutes\n            case 'x':\n                return formatTimezoneWithOptionalMinutes(timezoneOffset);\n            // Hours, minutes and optional seconds without `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xx`\n            case 'xxxx':\n            case 'xx': // Hours and minutes without `:` delimeter\n                return formatTimezone(timezoneOffset);\n            // Hours, minutes and optional seconds with `:` delimeter\n            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n            // so this token always has the same output as `xxx`\n            case 'xxxxx':\n            case 'xxx': // Hours and minutes with `:` delimeter\n            default:\n                return formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (GMT)\n    O: function (date, token, options) {\n        const timezoneOffset = getTimeZoneOffset(options.timeZone, date);\n        switch (token) {\n            // Short\n            case 'O':\n            case 'OO':\n            case 'OOO':\n                return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n            // Long\n            case 'OOOO':\n            default:\n                return 'GMT' + formatTimezone(timezoneOffset, ':');\n        }\n    },\n    // Timezone (specific non-location)\n    z: function (date, token, options) {\n        switch (token) {\n            // Short\n            case 'z':\n            case 'zz':\n            case 'zzz':\n                return tzIntlTimeZoneName('short', date, options);\n            // Long\n            case 'zzzz':\n            default:\n                return tzIntlTimeZoneName('long', date, options);\n        }\n    },\n};\nfunction getTimeZoneOffset(timeZone, originalDate) {\n    const timeZoneOffset = timeZone\n        ? tzParseTimezone(timeZone, originalDate, true) / MILLISECONDS_IN_MINUTE\n        : originalDate?.getTimezoneOffset() ?? 0;\n    if (Number.isNaN(timeZoneOffset)) {\n        throw new RangeError('Invalid time zone specified: ' + timeZone);\n    }\n    return timeZoneOffset;\n}\nfunction addLeadingZeros(number, targetLength) {\n    const sign = number < 0 ? '-' : '';\n    let output = Math.abs(number).toString();\n    while (output.length < targetLength) {\n        output = '0' + output;\n    }\n    return sign + output;\n}\nfunction formatTimezone(offset, delimiter = '') {\n    const sign = offset > 0 ? '-' : '+';\n    const absOffset = Math.abs(offset);\n    const hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n    const minutes = addLeadingZeros(Math.floor(absOffset % 60), 2);\n    return sign + hours + delimiter + minutes;\n}\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n    if (offset % 60 === 0) {\n        const sign = offset > 0 ? '-' : '+';\n        return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n    }\n    return formatTimezone(offset, delimiter);\n}\nfunction formatTimezoneShort(offset, delimiter = '') {\n    const sign = offset > 0 ? '-' : '+';\n    const absOffset = Math.abs(offset);\n    const hours = Math.floor(absOffset / 60);\n    const minutes = absOffset % 60;\n    if (minutes === 0) {\n        return sign + String(hours);\n    }\n    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    utcDate.setUTCFullYear(date.getFullYear());\n    return +date - +utcDate;\n}\n","/** Regex to identify the presence of a time zone specifier in a date string */\nexport const tzPattern = /(Z|[+-]\\d{2}(?::?\\d{2})?| UTC| [a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?)$/;\n","import { getTimezoneOffsetInMilliseconds } from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { tzPattern } from '../_lib/tzPattern/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst DEFAULT_ADDITIONAL_DIGITS = 2;\nconst patterns = {\n    dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\n    datePattern: /^([0-9W+-]+)(.*)/,\n    plainTime: /:/,\n    // year tokens\n    YY: /^(\\d{2})$/,\n    YYY: [\n        /^([+-]\\d{2})$/, // 0 additional digits\n        /^([+-]\\d{3})$/, // 1 additional digit\n        /^([+-]\\d{4})$/, // 2 additional digits\n    ],\n    YYYY: /^(\\d{4})/,\n    YYYYY: [\n        /^([+-]\\d{4})/, // 0 additional digits\n        /^([+-]\\d{5})/, // 1 additional digit\n        /^([+-]\\d{6})/, // 2 additional digits\n    ],\n    // date tokens\n    MM: /^-(\\d{2})$/,\n    DDD: /^-?(\\d{3})$/,\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n    Www: /^-?W(\\d{2})$/,\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    // time zone tokens (to identify the presence of a tz)\n    timeZone: tzPattern,\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param argument the value to convert\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {string} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n *\n * @returns the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function toDate(argument, options = {}) {\n    if (arguments.length < 1) {\n        throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n    if (argument === null) {\n        return new Date(NaN);\n    }\n    const additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n        throw new RangeError('additionalDigits must be 0, 1 or 2');\n    }\n    // Clone the date\n    if (argument instanceof Date ||\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')) {\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n        return new Date(argument.getTime());\n    }\n    else if (typeof argument === 'number' ||\n        Object.prototype.toString.call(argument) === '[object Number]') {\n        return new Date(argument);\n    }\n    else if (!(Object.prototype.toString.call(argument) === '[object String]')) {\n        return new Date(NaN);\n    }\n    const dateStrings = splitDateString(argument);\n    const { year, restDateString } = parseYear(dateStrings.date, additionalDigits);\n    const date = parseDate(restDateString, year);\n    if (date === null || isNaN(date.getTime())) {\n        return new Date(NaN);\n    }\n    if (date) {\n        const timestamp = date.getTime();\n        let time = 0;\n        let offset;\n        if (dateStrings.time) {\n            time = parseTime(dateStrings.time);\n            if (time === null || isNaN(time)) {\n                return new Date(NaN);\n            }\n        }\n        if (dateStrings.timeZone || options.timeZone) {\n            offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time));\n            if (isNaN(offset)) {\n                return new Date(NaN);\n            }\n        }\n        else {\n            // get offset accurate to hour in time zones that change offset\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n        }\n        return new Date(timestamp + time + offset);\n    }\n    else {\n        return new Date(NaN);\n    }\n}\nfunction splitDateString(dateString) {\n    const dateStrings = {};\n    let parts = patterns.dateTimePattern.exec(dateString);\n    let timeString;\n    if (!parts) {\n        parts = patterns.datePattern.exec(dateString);\n        if (parts) {\n            dateStrings.date = parts[1];\n            timeString = parts[2];\n        }\n        else {\n            dateStrings.date = null;\n            timeString = dateString;\n        }\n    }\n    else {\n        dateStrings.date = parts[1];\n        timeString = parts[3];\n    }\n    if (timeString) {\n        const token = patterns.timeZone.exec(timeString);\n        if (token) {\n            dateStrings.time = timeString.replace(token[1], '');\n            dateStrings.timeZone = token[1].trim();\n        }\n        else {\n            dateStrings.time = timeString;\n        }\n    }\n    return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n    if (dateString) {\n        const patternYYY = patterns.YYY[additionalDigits];\n        const patternYYYYY = patterns.YYYYY[additionalDigits];\n        // YYYY or ±YYYYY\n        let token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n        if (token) {\n            const yearString = token[1];\n            return {\n                year: parseInt(yearString, 10),\n                restDateString: dateString.slice(yearString.length),\n            };\n        }\n        // YY or ±YYY\n        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n        if (token) {\n            const centuryString = token[1];\n            return {\n                year: parseInt(centuryString, 10) * 100,\n                restDateString: dateString.slice(centuryString.length),\n            };\n        }\n    }\n    // Invalid ISO-formatted year\n    return {\n        year: null,\n    };\n}\nfunction parseDate(dateString, year) {\n    // Invalid ISO-formatted year\n    if (year === null) {\n        return null;\n    }\n    let date;\n    let month;\n    let week;\n    // YYYY\n    if (!dateString || !dateString.length) {\n        date = new Date(0);\n        date.setUTCFullYear(year);\n        return date;\n    }\n    // YYYY-MM\n    let token = patterns.MM.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        if (!validateDate(year, month)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month);\n        return date;\n    }\n    // YYYY-DDD or YYYYDDD\n    token = patterns.DDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        const dayOfYear = parseInt(token[1], 10);\n        if (!validateDayOfYearDate(year, dayOfYear)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, 0, dayOfYear);\n        return date;\n    }\n    // yyyy-MM-dd or YYYYMMDD\n    token = patterns.MMDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        const day = parseInt(token[2], 10);\n        if (!validateDate(year, month, day)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month, day);\n        return date;\n    }\n    // YYYY-Www or YYYYWww\n    token = patterns.Www.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        if (!validateWeekDate(week)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week);\n    }\n    // YYYY-Www-D or YYYYWwwD\n    token = patterns.WwwD.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        const dayOfWeek = parseInt(token[2], 10) - 1;\n        if (!validateWeekDate(week, dayOfWeek)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week, dayOfWeek);\n    }\n    // Invalid ISO-formatted date\n    return null;\n}\nfunction parseTime(timeString) {\n    let hours;\n    let minutes;\n    // hh\n    let token = patterns.HH.exec(timeString);\n    if (token) {\n        hours = parseFloat(token[1].replace(',', '.'));\n        if (!validateTime(hours)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\n    }\n    // hh:mm or hhmm\n    token = patterns.HHMM.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseFloat(token[2].replace(',', '.'));\n        if (!validateTime(hours, minutes)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    }\n    // hh:mm:ss or hhmmss\n    token = patterns.HHMMSS.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseInt(token[2], 10);\n        const seconds = parseFloat(token[3].replace(',', '.'));\n        if (!validateTime(hours, minutes, seconds)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n    }\n    // Invalid ISO-formatted time\n    return null;\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n    week = week || 0;\n    day = day || 0;\n    const date = new Date(0);\n    date.setUTCFullYear(isoWeekYear, 0, 4);\n    const fourthOfJanuaryDay = date.getUTCDay() || 7;\n    const diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n    date.setUTCDate(date.getUTCDate() + diff);\n    return date;\n}\n// Validation functions\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\nfunction validateDate(year, month, date) {\n    if (month < 0 || month > 11) {\n        return false;\n    }\n    if (date != null) {\n        if (date < 1) {\n            return false;\n        }\n        const isLeapYear = isLeapYearIndex(year);\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n            return false;\n        }\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n    if (dayOfYear < 1) {\n        return false;\n    }\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear && dayOfYear > 366) {\n        return false;\n    }\n    if (!isLeapYear && dayOfYear > 365) {\n        return false;\n    }\n    return true;\n}\nfunction validateWeekDate(week, day) {\n    if (week < 0 || week > 52) {\n        return false;\n    }\n    if (day != null && (day < 0 || day > 6)) {\n        return false;\n    }\n    return true;\n}\nfunction validateTime(hours, minutes, seconds) {\n    if (hours < 0 || hours >= 25) {\n        return false;\n    }\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\n        return false;\n    }\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\n        return false;\n    }\n    return true;\n}\n","import { format as dateFnsFormat } from 'date-fns/format';\nimport { formatters } from './formatters/index.js';\nimport { toDate } from '../toDate/index.js';\nconst tzFormattingTokensRegExp = /([xXOz]+)|''|'(''|[^'])+('|$)/g;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may consty by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | PDT, EST, CEST                    | 6     |\n * |                                 | zzzz    | Pacific Daylight Time             | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are created using the Intl browser API. The output is determined by the\n *    preferred standard of the current locale (en-US by default) which may not always give the expected result.\n *    For this reason it is recommended to supply a `locale` in the format options when formatting a time zone name.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. These tokens are often confused with others. See: https://git.io/fxCyr\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole\n *   library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard\n *   #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). See [this\n *   post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param date the original date\n * @param formatStr the string of tokens\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\n *   https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\n *   [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @param {Date|Number} [options.originalDate] - can be used to pass the original unmodified date to `format` to\n *   improve correctness of the replaced timezone token close to the DST threshold.\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see:\n *   https://git.io/fxCyr\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options = {}) {\n    formatStr = String(formatStr);\n    const matches = formatStr.match(tzFormattingTokensRegExp);\n    if (matches) {\n        const d = toDate(options.originalDate || date, options);\n        // Work through each match and replace the tz token in the format string with the quoted\n        // formatted time zone so the remaining tokens can be filled in by date-fns#format.\n        formatStr = matches.reduce(function (result, token) {\n            if (token[0] === \"'\") {\n                return result; // This is a quoted portion, matched only to ensure we don't match inside it\n            }\n            const pos = result.indexOf(token);\n            const precededByQuotedSection = result[pos - 1] === \"'\";\n            const replaced = result.replace(token, \"'\" + formatters[token[0]](d, token, options) + \"'\");\n            // If the replacement results in two adjoining quoted strings, the back to back quotes\n            // are removed, so it doesn't look like an escaped quote.\n            return precededByQuotedSection\n                ? replaced.substring(0, pos - 1) + replaced.substring(pos + 1)\n                : replaced;\n        }, formatStr);\n    }\n    return dateFnsFormat(date, formatStr, options);\n}\n","import { format } from '../format/index.js';\nimport { toZonedTime } from '../toZonedTime/index.js';\n/**\n * @name formatInTimeZone\n * @category Time Zone Helpers\n * @summary Gets the offset in milliseconds between the time zone and Universal Coordinated Time (UTC)\n *\n * @param date the date representing the local time / real UTC time\n * @param timeZone the time zone this date should be formatted for; can be an offset or IANA time zone\n * @param formatStr the string of tokens\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link\n *   https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See\n *   [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens\n *   (`yy`, `yyyy`). See: https://git.io/fxCyr\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n */\nexport function formatInTimeZone(date, timeZone, formatStr, options) {\n    options = {\n        ...options,\n        timeZone,\n        originalDate: date,\n    };\n    return format(toZonedTime(date, timeZone, { timeZone: options.timeZone }), formatStr, options);\n}\n","import { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { toDate } from '../toDate/index.js';\n/**\n * @name toZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param date the date with the relevant UTC time\n * @param timeZone the time zone to get local time for, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n *\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = toZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport function toZonedTime(date, timeZone, options) {\n    date = toDate(date, options);\n    const offsetMilliseconds = tzParseTimezone(timeZone, date, true);\n    const d = new Date(date.getTime() - offsetMilliseconds);\n    const resultDate = new Date(0);\n    resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n    resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n    return resultDate;\n}\n","import { toDate } from '../toDate/index.js';\nimport { tzPattern } from '../_lib/tzPattern/index.js';\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { newDateUTC } from '../_lib/newDateUTC/index.js';\n/**\n * @name fromZonedTime\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param date the date with values representing the local time\n * @param timeZone the time zone of this local time, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = fromZonedTime(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nexport function fromZonedTime(date, timeZone, options) {\n    if (typeof date === 'string' && !date.match(tzPattern)) {\n        return toDate(date, { ...options, timeZone });\n    }\n    date = toDate(date, options);\n    const utc = newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()).getTime();\n    const offsetMilliseconds = tzParseTimezone(timeZone, new Date(utc));\n    return new Date(utc + offsetMilliseconds);\n}\n","export default main;\n\nasync function getWeatherData (url) {\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);  \n    }\n    const weatherData = await response.json();\n    return weatherData;\n    \n  } catch (error) {\n    console.error('An error occurred while fetching data:', error);\n    throw error;\n  }\n  \n}\n\nfunction processWeatherData (data) {\n  // Check if data and necessary nested properties exist\n  if (\n    !data ||\n    !data.resolvedAddress ||\n    !data.timezone ||\n    !data.currentConditions ||\n    !data.currentConditions.conditions ||\n    !data.currentConditions.temp ||\n    !data.currentConditions.sunrise ||\n    !data.currentConditions.sunset ||\n    !Array.isArray(data.days) ||\n    data.days.length === 0 ||\n    !data.days[0].hours ||\n    data.days[0].hours.length < 19\n  ) {\n    console.error('Error: Missing essential data');\n    return { error: true, message: 'Data not available. Please try again later.' };\n  }\n\n  // Create object with necessary data, provide fallback values for unnecessary data\n  const processedData = {\n    location: data.resolvedAddress,\n    timezone: data.timezone,\n    currentConditions: data.currentConditions.conditions,\n    currentTemp: Math.round(data.currentConditions.temp),\n    sunrise: data.currentConditions.sunrise,\n    sunset: data.currentConditions.sunset,\n    forecastToday: [0, 3, 6, 9, 12, 15, 18, 21].map(hour => ({\n      temp: Math.round(data.days[0].hours[hour]?.temp) ?? 'N/A',\n      conditions: data.days[0].hours[hour]?.conditions || 'Unknown',\n    })),\n    forecastTomorrow: [0, 3, 6, 9, 12, 15, 18, 21].map(hour => ({\n      temp: Math.round(data.days[1].hours[hour]?.temp) ?? 'N/A',\n      conditions: data.days[1].hours[hour]?.conditions || 'Unknown',\n    })),\n  };\n\n  return processedData;\n}\n\nasync function main (location) {\n  try {\n    const today = new Date();\n    const todayString = today.toISOString();\n    const tomorrow = new Date(today.setDate(today.getDate() + 1));\n    const tomorrowString = tomorrow.toISOString();\n    const url = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}/${todayString}/${tomorrowString}?key=79A79ES6BP5MNJBRSCYC6UBYQ&contentType=json&lang=id`;\n    const weatherData = await getWeatherData(url);\n    console.log(weatherData);\n    const processedData = processWeatherData(weatherData);\n    console.log(processedData);\n    return processedData;\n\n  } catch (error) {\n    console.error('An error occurred in the main function:', error);\n  }\n}","import { formatInTimeZone, fromZonedTime } from \"date-fns-tz\";\nimport snowImage from './icons/snow-white.png';\nimport sunnyImage from './icons/sunny-white.png';\nimport rainImage from './icons/rain-white.png';\nimport overcastImage from './icons/overcast-white.png';\nimport home from './icons/home.png';\nimport partlyCloudyImage from './icons/partly-cloudy-white.png';\nimport main from \"./dataHandling\";\nimport displayHomePage from \"./homepage\";\n\nexport { userInterface, getConditionImage, isDay, dateIntervalID, timeIntervalID };\n\nlet dateIntervalID;\nlet timeIntervalID;\n\nfunction createWeatherPageContainer () {\n  const weatherDisplay = document.createElement('div');\n  weatherDisplay.classList.add('weather-display');\n\n  const homeIcon = document.createElement('input');\n  homeIcon.type = 'image'\n  homeIcon.src = home;\n  homeIcon.id = 'home-icon';\n  homeIcon.alt = 'Home button';\n  weatherDisplay.appendChild(homeIcon);\n\n  const flexContainerCol = document.createElement('div');\n  flexContainerCol.classList.add('flex-container-column');\n\n  const date = document.createElement('div');\n  date.id = 'date';\n  date.classList.add('flex-item');\n\n  const time = document.createElement('div');\n  time.id = 'time';\n  time.classList.add('flex-item');\n\n  const location = document.createElement('div');\n  location.id = 'location';\n  location.classList.add('flex-item');\n\n  const icon = document.createElement('img');\n  icon.id = 'condition-icon';\n\n  const currentTemp = document.createElement('div');\n  currentTemp.id = 'current-temp';\n  currentTemp.classList.add('flex-item');\n\n  const forecastHeader = document.createElement('div');\n  forecastHeader.textContent = 'Forecast';\n\n  const forecastContainer = document.createElement('div');\n  forecastContainer.id = 'forecast-container';\n  forecastContainer.classList.add('flex-item');\n\n  const locationSearch = document.createElement('input');\n  locationSearch.type = 'search';\n  locationSearch.id = 'search-location';\n  locationSearch.name = 'search-location';\n  locationSearch.classList.add('flex-item');\n\n  const searchButton = document.createElement('button');\n  searchButton.textContent = 'Search';\n  searchButton.classList.add('search-button');\n  searchButton.classList.add('flex-item');\n\n  document.body.appendChild(weatherDisplay);\n  weatherDisplay.appendChild(flexContainerCol);\n  flexContainerCol.appendChild(date);\n  flexContainerCol.appendChild(time);\n  flexContainerCol.appendChild(location);\n  flexContainerCol.appendChild(icon);\n  flexContainerCol.appendChild(currentTemp);\n  flexContainerCol.appendChild(forecastHeader);\n  flexContainerCol.appendChild(forecastContainer);\n  flexContainerCol.appendChild(locationSearch);\n  flexContainerCol.appendChild(searchButton);\n}\n\nasync function userInterface () {\n  const locationInputHome = document.querySelector('#home-search');\n  document.body.textContent = '';\n  const processedData = await main(locationInputHome.value);\n  createWeatherPageContainer();\n  displayWeather(processedData);\n  const searchButton = document.querySelector('.search-button');\n  const locationInput = document.querySelector('#search-location');\n\n  const homeButton = document.querySelector('#home-icon');\n\n  searchButton.addEventListener('click', async function () {\n    const processedData = await main(locationInput.value); \n    displayWeather(processedData); });\n\n  homeButton.addEventListener('click', () => {\n    clearInterval(timeIntervalID);\n    clearInterval(dateIntervalID);\n    displayHomePage();\n  });\n\n  \n  \n  // searchButton.addEventListener('click', async () => {\n  //   location.textContent = '';\n  //   currentTemp.textContent = '';\n  //   clearInterval(dateIntervalID);\n  //   clearInterval(timeIntervalID);\n  //   const searchLocation = locationInput.value;\n  //   const processedData = await main(searchLocation);\n  //   location.textContent = processedData.location;\n  //   currentTemp.textContent = processedData.currentTemp + \"\\u00B0\";\n  //   displayCurrentDate(processedData.timezone);\n  //   dateIntervalID = setInterval(displayCurrentDate, 1000*60, processedData.timezone);\n  //   displayCurrentTime(processedData.timezone);\n  //   timeIntervalID = setInterval(displayCurrentTime, 1000, processedData.timezone);\n  //   displayForecast(processedData.forecastToday, processedData.forecastTomorrow, processedData.timezone);\n  //   displayBackground(processedData.sunrise, processedData.sunset, processedData.timezone);\n  //   const img = document.querySelector('#condition-icon');\n  //   const imageSrc = getConditionImage(processedData.currentConditions);\n  //   if (imageSrc != null) {\n  //     img.src = imageSrc;\n  //   }\n  // });\n}\n\nfunction displayCurrentTime (timezone) {\n  const time = document.querySelector('#time');\n  time.textContent = '';\n  const zonedTime = formatInTimeZone(new Date(), timezone, 'p');\n  time.textContent = zonedTime;\n}\n\nfunction displayCurrentDate (timezone) {\n  const date = document.querySelector('#date');\n  date.textContent = '';\n  const zonedDate = formatInTimeZone(new Date(), timezone, 'eeee, PPP');\n  date.textContent = zonedDate;\n}\n\nfunction getConditionImage (conditions) {\n  const snowRegex = /\\b(type_1|type_22|type_23|type_31|type_32|type_33|type_34|type_35)\\b/;\n  const rainRegex = /\\b(type_2|type_3|type_4|type_5|type_6|type_9|type_10|type_11|type_13|type_14|type_21|type_24|type_25|type_26)\\b/;\n  const overcastRegex = /\\btype_41\\b/;\n  const partlyCloudyRegex = /\\btype_42\\b/;\n  const sunnyRegex = /\\btype_43\\b/;\n\n  if (snowRegex.test(conditions)) {\n    return snowImage;\n  }\n  else if (rainRegex.test(conditions)) {\n    return rainImage;\n  }\n  else if (overcastRegex.test(conditions)) {\n    return overcastImage;\n  }\n  else if (partlyCloudyRegex.test(conditions)) {\n    return partlyCloudyImage;\n  }\n  else if (sunnyRegex.test(conditions)) {\n    return sunnyImage;\n  }\n  else {\n    return null;\n  }\n}\n\nfunction isDay(sunrise, sunset, timezone) {\n  const currentDate = formatInTimeZone(new Date(), timezone, 'yyyy-MM-dd');\n  const dateWithSunrise = currentDate + \"T\" + sunrise;\n  const dateWithSunset = currentDate + \"T\" + sunset;\n  const utcDateSunrise = fromZonedTime(dateWithSunrise, timezone);\n  const utcDateSunset = fromZonedTime(dateWithSunset, timezone);\n  if (utcDateSunrise < new Date() && new Date() < utcDateSunset) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction displayForecast(todayForecast, tomorrowForecast, timezone) {\n  const hours = ['12am', '3am', '6am', '9am', '12pm', '3pm', '6pm', '9pm'];\n  const forecastContainer = document.querySelector('#forecast-container');\n  forecastContainer.textContent = '';\n  const currentHour = Number(formatInTimeZone(new Date(), timezone, 'H'));\n  let hourIndex = Math.floor(currentHour/3) + 1;\n  let count = 0;\n  while (count < 4) {\n    const forecastDiv = document.createElement('div');\n    forecastDiv.classList.add('forecast');\n    const timeDiv = document.createElement('div');\n    const conditionImg = document.createElement('img');\n    conditionImg.style.width = '50px';\n    conditionImg.style.height = '50px';\n    const tempDiv = document.createElement('div');\n    forecastDiv.appendChild(timeDiv);\n    forecastDiv.appendChild(conditionImg);\n    forecastDiv.appendChild(tempDiv);\n    forecastContainer.appendChild(forecastDiv);\n\n    if (hourIndex < 8) {  \n      timeDiv.textContent = hours[hourIndex];\n      const image = getConditionImage(todayForecast[hourIndex].conditions);\n      if (image != null) {\n        conditionImg.src = image;\n      }\n      tempDiv.textContent = todayForecast[hourIndex].temp + \"\\u00B0\";\n      hourIndex += 1;\n    } else {\n      const tomorrowHourIndex = hourIndex - 8;\n      timeDiv.textContent = hours[tomorrowHourIndex];\n      const image = getConditionImage(tomorrowForecast[tomorrowHourIndex].conditions);\n      if (image != null) {\n        conditionImg.src = image;\n      }\n      tempDiv.textContent = tomorrowForecast[tomorrowHourIndex].temp + \"\\u00B0\";\n      hourIndex += 1;\n    }\n    count += 1;\n  }\n}\n\nfunction displayWeather (processedData) {\n  const location = document.querySelector('#location');\n  const currentTemp = document.querySelector('#current-temp');\n  location.textContent = '';\n  currentTemp.textContent = '';\n  clearInterval(dateIntervalID);\n  clearInterval(timeIntervalID);\n  location.textContent = processedData.location;\n  currentTemp.textContent = processedData.currentTemp + \"\\u00B0\";\n  displayCurrentDate(processedData.timezone);\n  dateIntervalID = setInterval(displayCurrentDate, 1000*60, processedData.timezone);\n  displayCurrentTime(processedData.timezone);\n  timeIntervalID = setInterval(displayCurrentTime, 1000, processedData.timezone);\n  displayForecast(processedData.forecastToday, processedData.forecastTomorrow, processedData.timezone);\n  const daytime = isDay(processedData.sunrise, processedData.sunset, processedData.timezone);\n  const container = document.querySelector('.weather-display');\n  if (daytime) {\n    container.style.background = \"linear-gradient(rgb(89, 202, 240), rgb(64, 201, 243))\";\n  } else {\n    container.style.background = \"linear-gradient(rgb(33, 4, 100), rgb(19, 3, 49))\";\n  }\n  const img = document.querySelector('#condition-icon');\n  const imageSrc = getConditionImage(processedData.currentConditions);\n  if (imageSrc != null) {\n    img.src = imageSrc;\n  }\n}","import { userInterface, getConditionImage, isDay } from \"./display\";\nimport main from \"./dataHandling\";\nexport default displayHomePage;\n\nasync function displayHomePage () {\n  document.body.textContent = '';\n  \n  const processedData1 = await main('Los Angeles');\n  const processedData2 = await main('New York');\n  const processedData3 = await main('London');\n  const processedData4 = await main('Tokyo'); \n\n  createHomePage();\n  displayWeatherBrief(processedData1, 'item1');\n  displayWeatherBrief(processedData2, 'item2');\n  displayWeatherBrief(processedData3, 'item3');\n  displayWeatherBrief(processedData4, 'item4');\n\n  const button = document.querySelector('#home-search-button');\n  button.addEventListener('click', userInterface);\n}\n\nfunction createHomePage () {\n  const gridContainer = document.createElement('div');\n  gridContainer.classList.add('grid-container');\n  document.body.appendChild(gridContainer);\n\n  const item1 = document.createElement('div');\n  item1.id = 'item1';\n  const location1 = document.createElement('div');\n  location1.id = 'item1-location';\n  const img1 = document.createElement('img');\n  img1.id = 'item1-img';\n  const temp1 = document.createElement('div');\n  temp1.id = 'item1-temp';\n  item1.appendChild(location1);\n  item1.appendChild(img1);\n  item1.appendChild(temp1);\n\n  const item2 = document.createElement('div');\n  item2.id = 'item2';\n  const location2 = document.createElement('div');\n  location2.id = 'item2-location';\n  const img2 = document.createElement('img');\n  img2.id = 'item2-img';\n  const temp2 = document.createElement('div');\n  temp2.id = 'item2-temp';\n  item2.appendChild(location2);\n  item2.appendChild(img2);\n  item2.appendChild(temp2);\n\n  const item3 = document.createElement('div');\n  item3.id = 'item3'\n  const location3 = document.createElement('div');\n  location3.id = 'item3-location';\n  const img3 = document.createElement('img');\n  img3.id = 'item3-img';\n  const temp3 = document.createElement('div');\n  temp3.id = 'item3-temp';\n  item3.appendChild(location3);\n  item3.appendChild(img3);\n  item3.appendChild(temp3);\n\n  const item4 = document.createElement('div');\n  item4.id = 'item4';\n  const location4 = document.createElement('div');\n  location4.id = 'item4-location';\n  const img4 = document.createElement('img');\n  img4.id = 'item4-img';\n  const temp4 = document.createElement('div');\n  temp4.id = 'item4-temp';\n  item4.appendChild(location4);\n  item4.appendChild(img4);\n  item4.appendChild(temp4);\n\n  gridContainer.appendChild(item1);\n  gridContainer.appendChild(item2);\n  gridContainer.appendChild(item3);\n  gridContainer.appendChild(item4);\n\n  const input = document.createElement('input');\n  input.type = 'search';\n  input.id = 'home-search';\n\n  const button = document.createElement('button');\n  button.id ='home-search-button';\n  button.textContent = 'Search location';\n\n  document.body.appendChild(input);\n  document.body.appendChild(button);\n}  \n  \nfunction displayWeatherBrief (processedData, item) {\n  const location = document.querySelector(`#${item}-location`);\n  const temp = document.querySelector(`#${item}-temp`);\n  location.textContent = '';\n  temp.textContent = '';\n  location.textContent = processedData.location;\n  temp.textContent = processedData.currentTemp + '\\u00B0';\n\n  const img = document.querySelector(`#${item}-img`);\n  const imageSrc = getConditionImage(processedData.currentConditions);\n  if (imageSrc != null) {\n    img.src = imageSrc;\n  }\n  const daytime = isDay(processedData.sunrise, processedData.sunset, processedData.timezone);\n  const itemContainer = document.querySelector(`#${item}`)\n  if (daytime) {\n    itemContainer.style.background = \"linear-gradient(rgb(89, 202, 240), rgb(64, 201, 243))\";\n  } else {\n    itemContainer.style.background = \"linear-gradient(rgb(33, 4, 100), rgb(19, 3, 49))\";\n  }\n}","import \"./style.css\";\nimport displayHomePage from \"./homepage\";\n\ndisplayHomePage();\n// import { formatInTimeZone, fromZonedTime } from \"date-fns-tz\";\n// import snowImage from './icons/snow-white.png';\n// import sunnyImage from './icons/sunny-white.png';\n// import rainImage from './icons/rain-white.png';\n// import overcastImage from './icons/overcast-white.png';\n// import partlyCloudyImage from './icons/partly-cloudy-white.png';\n// import createWeatherPageContainer from \"./display\";\n\n// async function getWeatherData (url) {\n//   try {\n//     const response = await fetch(url);\n//     if (!response.ok) {\n//       throw new Error(`HTTP error! Status: ${response.status}`);  \n//     }\n//     const weatherData = await response.json();\n//     return weatherData;\n    \n//   } catch (error) {\n//     console.error('An error occurred while fetching data:', error);\n//     throw error;\n//   }\n  \n// }\n\n// function processWeatherData (data) {\n//   // Check if data and necessary nested properties exist\n//   if (\n//     !data ||\n//     !data.resolvedAddress ||\n//     !data.timezone ||\n//     !data.currentConditions ||\n//     !data.currentConditions.conditions ||\n//     !data.currentConditions.temp ||\n//     !data.currentConditions.sunrise ||\n//     !data.currentConditions.sunset ||\n//     !Array.isArray(data.days) ||\n//     data.days.length === 0 ||\n//     !data.days[0].hours ||\n//     data.days[0].hours.length < 19\n//   ) {\n//     console.error('Error: Missing essential data');\n//     return { error: true, message: 'Data not available. Please try again later.' };\n//   }\n\n//   // Create object with necessary data, provide fallback values for unnecessary data\n//   const processedData = {\n//     location: data.resolvedAddress,\n//     timezone: data.timezone,\n//     currentConditions: data.currentConditions.conditions,\n//     currentTemp: Math.round(data.currentConditions.temp),\n//     sunrise: data.currentConditions.sunrise,\n//     sunset: data.currentConditions.sunset,\n//     forecastToday: [0, 3, 6, 9, 12, 15, 18, 21].map(hour => ({\n//       temp: Math.round(data.days[0].hours[hour]?.temp) ?? 'N/A',\n//       conditions: data.days[0].hours[hour]?.conditions || 'Unknown',\n//     })),\n//     forecastTomorrow: [0, 3, 6, 9, 12, 15, 18, 21].map(hour => ({\n//       temp: Math.round(data.days[1].hours[hour]?.temp) ?? 'N/A',\n//       conditions: data.days[1].hours[hour]?.conditions || 'Unknown',\n//     })),\n//   };\n\n//   return processedData;\n// }\n\n// async function main (location) {\n//   try {\n//     const today = new Date();\n//     const todayString = today.toISOString();\n//     const tomorrow = new Date(today.setDate(today.getDate() + 1));\n//     const tomorrowString = tomorrow.toISOString();\n//     const url = `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}/${todayString}/${tomorrowString}?key=79A79ES6BP5MNJBRSCYC6UBYQ&contentType=json&lang=id`;\n//     const weatherData = await getWeatherData(url);\n//     console.log(weatherData);\n//     const processedData = processWeatherData(weatherData);\n//     console.log(processedData);\n//     return processedData;\n\n//   } catch (error) {\n//     console.error('An error occurred in the main function:', error);\n//   }\n// }\n\n// function userInterface () {\n//   createWeatherPageContainer();\n//   const searchButton = document.querySelector('button');\n//   const locationInput = document.querySelector('#search-location');\n//   const location = document.querySelector('#location');\n//   const currentTemp = document.querySelector('#current-temp');\n//   let dateIntervalID;\n//   let timeIntervalID;\n//   searchButton.addEventListener('click', async () => {\n//     location.textContent = '';\n//     currentTemp.textContent = '';\n//     clearInterval(dateIntervalID);\n//     clearInterval(timeIntervalID);\n//     const searchLocation = locationInput.value;\n//     const processedData = await main(searchLocation);\n//     location.textContent = processedData.location;\n//     currentTemp.textContent = processedData.currentTemp + \"\\u00B0\";\n//     displayCurrentDate(processedData.timezone);\n//     dateIntervalID = setInterval(displayCurrentDate, 1000*60, processedData.timezone);\n//     displayCurrentTime(processedData.timezone);\n//     timeIntervalID = setInterval(displayCurrentTime, 1000, processedData.timezone);\n//     displayForecast(processedData.forecastToday, processedData.forecastTomorrow, processedData.timezone);\n//     displayBackground(processedData.sunrise, processedData.sunset, processedData.timezone);\n//     const img = document.querySelector('#condition-icon');\n//     const imageSrc = getConditionImage(processedData.currentConditions);\n//     if (imageSrc != null) {\n//       img.src = imageSrc;\n//     }\n//   });\n// }\n\n// function displayCurrentTime (timezone) {\n//   const time = document.querySelector('#time');\n//   time.textContent = '';\n//   const zonedTime = formatInTimeZone(new Date(), timezone, 'p');\n//   time.textContent = zonedTime;\n// }\n\n// function displayCurrentDate (timezone) {\n//   const date = document.querySelector('#date');\n//   date.textContent = '';\n//   const zonedDate = formatInTimeZone(new Date(), timezone, 'eeee, PPP');\n//   date.textContent = zonedDate;\n// }\n\n// function getConditionImage (conditions) {\n//   const snowRegex = /\\b(type_1|type_22|type_23|type_31|type_32|type_33|type_34|type_35)\\b/;\n//   const rainRegex = /\\b(type_2|type_3|type_4|type_5|type_6|type_9|type_10|type_11|type_13|type_14|type_21|type_24|type_25|type_26)\\b/;\n//   const overcastRegex = /\\btype_41\\b/;\n//   const partlyCloudyRegex = /\\btype_42\\b/;\n//   const sunnyRegex = /\\btype_43\\b/;\n\n//   if (snowRegex.test(conditions)) {\n//     return snowImage;\n//   }\n//   else if (rainRegex.test(conditions)) {\n//     return rainImage;\n//   }\n//   else if (overcastRegex.test(conditions)) {\n//     return overcastImage;\n//   }\n//   else if (partlyCloudyRegex.test(conditions)) {\n//     return partlyCloudyImage;\n//   }\n//   else if (sunnyRegex.test(conditions)) {\n//     return sunnyImage;\n//   }\n//   else {\n//     return null;\n//   }\n// }\n\n// function displayBackground(sunrise, sunset, timezone) {\n//   const container = document.querySelector('.flex-container-column');\n//   const currentDate = formatInTimeZone(new Date(), timezone, 'yyyy-MM-dd');\n//   const dateWithSunrise = currentDate + \"T\" + sunrise;\n//   const dateWithSunset = currentDate + \"T\" + sunset;\n//   const utcDateSunrise = fromZonedTime(dateWithSunrise, timezone);\n//   const utcDateSunset = fromZonedTime(dateWithSunset, timezone);\n//   if (utcDateSunrise < new Date() && new Date() < utcDateSunset) {\n//     container.style.background = \"linear-gradient(rgb(89, 202, 240), rgb(64, 201, 243))\";\n//   } else {\n//     container.style.background = \"linear-gradient(rgb(33, 4, 100), rgb(19, 3, 49))\";\n//   }\n// }\n\n// function displayForecast(todayForecast, tomorrowForecast, timezone) {\n//   const hours = ['12am', '3am', '6am', '9am', '12pm', '3pm', '6pm', '9pm'];\n//   const forecastContainer = document.querySelector('#forecast-container');\n//   forecastContainer.textContent = '';\n//   const currentHour = Number(formatInTimeZone(new Date(), timezone, 'H'));\n//   let hourIndex = Math.floor(currentHour/3) + 1;\n//   let count = 0;\n//   while (count < 4) {\n//     const forecastDiv = document.createElement('div');\n//     forecastDiv.classList.add('forecast');\n//     const timeDiv = document.createElement('div');\n//     const conditionImg = document.createElement('img');\n//     conditionImg.style.width = '50px';\n//     conditionImg.style.height = '50px';\n//     const tempDiv = document.createElement('div');\n//     forecastDiv.appendChild(timeDiv);\n//     forecastDiv.appendChild(conditionImg);\n//     forecastDiv.appendChild(tempDiv);\n//     forecastContainer.appendChild(forecastDiv);\n\n//     if (hourIndex < 8) {  \n//       timeDiv.textContent = hours[hourIndex];\n//       const image = getConditionImage(todayForecast[hourIndex].conditions);\n//       if (image != null) {\n//         conditionImg.src = image;\n//       }\n//       tempDiv.textContent = todayForecast[hourIndex].temp + \"\\u00B0\";\n//       hourIndex += 1;\n//     } else {\n//       const tomorrowHourIndex = hourIndex - 8;\n//       timeDiv.textContent = hours[tomorrowHourIndex];\n//       const image = getConditionImage(tomorrowForecast[tomorrowHourIndex].conditions);\n//       if (image != null) {\n//         conditionImg.src = image;\n//       }\n//       tempDiv.textContent = tomorrowForecast[tomorrowHourIndex].temp + \"\\u00B0\";\n//       hourIndex += 1;\n//     }\n//     count += 1;\n//   }\n// }\n\n// userInterface();"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","options","idCountMap","identifiers","base","count","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","domAPI","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","insert","style","target","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","setAttributes","attributes","styleElement","nonce","setAttribute","insertStyleElement","styleTagTransform","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","replace","p","nc","locals","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","width","String","defaultWidth","formats","formatLong","date","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","value","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","localize","ordinalNumber","dirtyNumber","_options","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","Array","isArray","array","findIndex","object","findKey","valueCallback","rest","slice","parsePattern","parseInt","parseResult","any","enUS","code","formatDistance","token","tokenValue","addSuffix","comparison","formatRelative","_date","_baseDate","weekStartsOn","firstWeekContainsDate","defaultOptions","getDefaultOptions","Math","pow","millisecondsInWeek","constructFromSymbol","Symbol","for","constructFrom","Date","constructor","toDate","argument","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","in","setHours","getDayOfYear","laterDate","earlierDate","laterDate_","earlierDate_","dates","normalize","bind","find","normalizeDates","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","round","differenceInCalendarDays","date_","setFullYear","startOfYear","startOfWeek","locale","getDay","diff","setDate","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","getISOWeek","fourthOfJanuary","startOfISOWeekYear","getWeekYear","firstWeekOfNextYear","firstWeekOfThisYear","getWeek","firstWeek","startOfWeekYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","y","signedYear","M","dayPeriodEnumValue","h","H","m","s","S","numberOfDigits","milliseconds","trunc","formatters","G","unit","Y","signedWeekYear","weekYear","R","u","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","localDayOfWeek","c","isoDayOfWeek","toLowerCase","b","hours","B","K","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","delimiter","sign","absOffset","minutes","dateLongFormatter","pattern","timeLongFormatter","longFormatters","P","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isValid","isNaN","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","cleanEscapedString","input","matched","tzIntlTimeZoneName","assign","dtf","timeZone","Intl","DateTimeFormat","timeZoneName","getDTF","formatted","formatToParts","type","partsTimeZone","format","tzNameMatch","exec","substr","hackyTimeZone","typeToPos","hour","minute","second","dtfCache","testDateFormatted","hourCycle","hourCycleSupported","newDateUTC","fullYear","millisecond","setUTCHours","MILLISECONDS_IN_HOUR","patterns","timezone","timezoneZ","timezoneHH","timezoneHHMM","timezoneString","isUtcDate","absoluteOffset","validateTimezone","NaN","timeZoneString","validIANATimezoneCache","error","isValidTimezoneIANAString","now","toUtcDate","calcOffset","fixedOffset","utcGuess","o2","o3","max","fixOffset","tokens","hour12","getDateTimeFormat","filled","pos","RangeError","partsOffset","parsed","hackyOffset","tzTokenizeDate","asUTC","asTS","over","getTimeZoneOffset","floor","originalDate","timeZoneOffset","output","tzPattern","dateTimePattern","plainTime","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","arguments","TypeError","additionalDigits","dateStrings","dateString","timeString","parts","trim","splitDateString","restDateString","patternYYY","patternYYYYY","yearString","centuryString","parseYear","validateDate","isLeapYear","isLeapYearIndex","validateDayOfYearDate","validateWeekDate","dayOfISOWeekYear","parseDate","timestamp","parseFloat","validateTime","seconds","parseTime","isoWeekYear","getUTCDay","setUTCDate","getUTCDate","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","tzFormattingTokensRegExp","formatInTimeZone","formatStr","matches","reduce","indexOf","precededByQuotedSection","replaced","substring","firstCharacter","longFormatter","isToken","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","_message","subject","message","console","warn","includes","warnOrThrowProtectedError","formatter","offsetMilliseconds","resultDate","getUTCFullYear","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toZonedTime","fromZonedTime","utc","async","todayString","toISOString","url","weatherData","response","fetch","ok","status","json","getWeatherData","log","processedData","resolvedAddress","currentConditions","conditions","temp","sunrise","sunset","days","currentTemp","forecastToday","forecastTomorrow","processWeatherData","dateIntervalID","timeIntervalID","userInterface","locationInputHome","body","textContent","weatherDisplay","classList","add","homeIcon","alt","flexContainerCol","icon","forecastHeader","forecastContainer","locationSearch","name","searchButton","createWeatherPageContainer","displayWeather","locationInput","homeButton","addEventListener","clearInterval","displayCurrentTime","zonedTime","displayCurrentDate","zonedDate","getConditionImage","isDay","currentDate","dateWithSunset","utcDateSunrise","utcDateSunset","setInterval","todayForecast","tomorrowForecast","currentHour","hourIndex","forecastDiv","timeDiv","conditionImg","height","tempDiv","image","tomorrowHourIndex","displayForecast","daytime","background","img","imageSrc","processedData1","processedData2","processedData3","processedData4","gridContainer","item1","location1","img1","temp1","item2","location2","img2","temp2","item3","location3","img3","temp3","item4","location4","img4","temp4","button","createHomePage","displayWeatherBrief"],"sourceRoot":""}